#ifndef AFX_CNDEXINTERFACE_H__F5589475_18D4_12F6_A790_0011E33659A4__INCLUDED_
#define AFX_CNDEXINTERFACE_H__F5589475_18D4_12F6_A790_0011E33659A4__INCLUDED_

/*
' OSAI S.p.A. Barone Canavese (Torino) Italy
'
' file:     CndexLinkUser.h
' version:  3.1.2
'
'
' Errors management
'
' The DLL CndexLink uses the return code of the function and two double words
' for the error management. The double words are the class of the error and
' the error code.
' The return code of the functions is always a boolean. True means that the
' function has been executed without error, False means error during function
' execution.
' When the return code is False the parameters ErrClass and ErrNum report the
' codes related to the error
'
' The errors has been organized using classes to avoid error codes overlap
' Each class identify a level in the hierarchy of the modules used to 
' communicate with the CNC
' For the error classes and error codes error definition please refer to the
' Cndex server interface documentation.
' The following codes could be not updated to last Cndex server version.
'
'
' The classes are the following:
'
' COM Class                    (class 1)
' The errors belonging to this class are generated by the COM interface
' that is used to carry out the calls to Cndex server.
'
' CNDEX SERVER Class           (class 2)
' The errors belonging to this class can be generated either by the preliminary
' checks done by Cndex server on the called functions parameters or by internal
' errors of the server.
'
' NETBIOS Class                (class 3)
' The errors belonging to this class depend by anomalies or errors during 
' data exchange between Cndex server and the managed CNC connected through 
' local network.
'
' CNC Class                    (class 4)
' The errors belonging to this class are generated by the elaboration of the
' commads by the CNC connected to Cndex.
'
' FILE_SYSTEM  Class           (class 5)
' The errors belonging to this class are generated by the remote file system
' functions
'
' FILE_SYSTEM_LAST_ERROR Class (class 6)
' The errors belonging to this class are generated by the remote file system
' functions
'
' CNDEXLINK Class              (class 9)
' The errors belonging to this class are generated by CndexLink library
'
' CNDEX INTERFACE Class    (class 10)
' The errors belonging to this class are generated by CndexInterface DLL that
' is used to interface Cndex server.
'
'
' Error codes for COM classe (class 1)
'
' This is a list of the main COM errors
'
' CO_E_SERVER_EXEC_FAILURE    0x80080005
' Su Windows 95/98 il server non puo' essere lanciato automaticamente ma bisogna
' metterlo in esecuzione manualmente, ricordando che quando non c'e' piu' nessuna
' applicazione attiva il server viene terminato automaticamente.
'
' RPC_S_SERVER_UNAVAILABLE    0x800706ba
' · assicurarsi che nel registry il valore del parametro <enableremoteconnect> sia Y
' · aggiungere o attivare il protocollo TCP/IP nella configurazione di rete
'   
' E_ACCESSDENIED     0x80070005
' Su Windows NT/2000 lanciare l'utility dcomcnfg.exe e selezionare
' <the interactive user> o <this user> nella sezione identity dell'applicazione cndex,
' ed <everyone> nella sezione di launch permission
'
' REGDB_E_CLASSNOTREG      0x80040154
' Il server Cndex non e' stato registrato nel registry di Windows. Registrarlo con
' questo comando da eseguire in un DOS shell : cndex.exe /regserver
'
' CO_S_NOTALLINTERFACES    0x00080012
' La DLL proxy del server Cndex non e' stata registrata nel registry di Windows.
' Registrarla con questo comando da eseguire in un DOS shell : regsvr32 cndexps.dll
'
'
'
' Error codes for CNDEX SERVER classe (class 2)
'
'  1 = No memory for dynamic memory allocation
'  2 =  Error creating syncronization events
'  3 =  Session aborted. It can not be used anymore.
'  4 =  Session not opened
'  5 =  It is not possible to allocate a network channel
'  6 =  It has been activated a function for an unexisting CNC process.
'  7 =  Broadcasting command aborted
'  8 =  User output buffer too small
'  9 =  Session already opened
' 10 =  Broadcasting list not valid
' 11 =  Realtime command aborted
' 12 =  The function is already active
' 13 = The function is not active yet
' 14 = Reciving thread terminated
' 15 = Time-out. No answer (after an establish time) to the command sent to CNC.
' 16 = The software release of the connected CNC is not compatible with the Cndex server protocol
' 17 = The given session identifier is not valid
' 18 = It is not possible to create the real-time thread
' 19 = No network session channels available anymore
' 20 = Error loading CNC symbols
' 23 = It is not possible to create an instance of the session object
' 24 = It is not possible to create the broadcasting thread
' 25 = The function can not be executed during this phase of the CNC boot
' 26 = Wrong parameter
' 27 = Buffer not valid
' 29 = The UserSession parameter is not valid (there is not a correspondig session)
' 31 = The UserSession parameter is either not valid or the corrisponding session has
' 32 = Errore di scrittura del registry
' 33 = Out of memory
' 34 = Funzione non disponibile. La fase di boot non e' corretta
'      oppure c'e' stato un errore di caricamento del SW minimo
'      per l'esecuzione del comando
' 35 = Time-out attesa evento generico (usata in reboot)
' 36 = Errore durante la registarzione del thread corrente come thread WinCnc
' 37 = Errore lanciando o eseguendo un processo (applicazione) esterno al server
' 38 = Funzione non implementata
'
'
'
' Error codes for NETBIOS class (class 3)
'
' 0x0001  Illegal buffer length
' 0x0003  Illegal command
' 0x0005  Command timed out
' 0x0006  Message incomplete, issue another command
' 0x0007  Illegal buffer address
' 0x0008  Session number out of range
' 0x0009  No resource available
' 0x000a  Session closed
' 0x000b  Command cancelled
' 0x000d  Duplicate name
' 0x000e  Name table full
' 0x000f  No deletions, name has active sessions
' 0x0011  Local session table full
' 0x0012  Remote session table full
' 0x0013  Illegal name number
' 0x0014  No callname
' 0x0015  Cannot put * in NCB_NAME
' 0x0016  Name in use on remote adapter
' 0x0017  Name deleted
' 0x0018  Session ended abnormally
' 0x0019  Name conflict detected
' 0x0021  Interface busy, IRET before retrying
' 0x0022  Too many commands outstanding, retry later
' 0x0023  Ncb_lana_num field invalid
' 0x0024  Command completed while cancel occurring
' 0x0026  Command not valid to cancel
' 0x0030  Name defined by anther local process
' 0x0034  Environment undefined. RESET required
' 0x0035  Required OS resources exhausted
' 0x0036  Max number of applications exceeded
' 0x0037  No saps available for netbios
' 0x0038  Requested resources are not available
' 0x0039  Invalid ncb address or length > segment
' 0x003B  Invalid NCB DDID
' 0x003C  Lock of user area failed
' 0x003f  NETBIOS not loaded
' 0x0040  System error
'
'
'
' Error codes for CNC class (class 4)
'
' For the error codes related to this class please refer to 
' "MINI-DNC ETHERNET Functions Library" and "USER MANUAL" of the
' 10/Series CNC
'
'
'
' Error code for FILE_SYSTEM class (class 5)
'
'1 = Errore apertura canale file, troppi file aperti
'2 = Errore chiusura canale file, identificatore file fuori range o errato
'3 = Errore canale file, identificatore file fuori range o errato
'4 = Errore numero di transazione. Il numero di transazione non è successivo
'    al numero di transazione usato in precedenza.
'5 = Errore aprendo il file
'6 = Errore chiudendo il file
'7 = I caratteri jolly (wilcard) non sono ammessi
'8 = Errore durante la lettura dati
'9 = Errore durante la scrittura dati
'10 = Il drive logico specificato non esiste
'12 = Percorso file (path name) errato
'13 = Nome drive logico già esistente
'14 = Il livelo di sicurezza attivo non permette di effettuare l'operazione
'15 = Non si possono inserire drive logici su un PC da rete
'16 = spazio su disco insufficiente
'
'
'
' Error code for FILE_SYSTEM_LAST_ERROR class (class 6)
'
' The error codes related to this class are general errors returned
' by GetLastError function. Please refer to Microsoft documentation
' for details.
'
'
'
' Error code for CNDEXLINK class (class 9)
'
' 1 = Interfaccia (e comando) non disponibile sul server
' 2 = E' stato specificato un sistema che dispone del solo protocollo
'     Netbios come router per collegare un controllo Serie10.
' 3 = Errore durante l'apertura file.
' 4 = Errore durante la lettura file.
' 5 = Errore durante la scrittura file.
' 6 = Errore durante la chiusura file.
' 7 = Memoria insufficiente. 
' 8 = Errore durante la lettura della dimensione di un file locale
' 9 = Spazio su disco insufficiente
'
'
'
' Error codes for CNDEX INTERFACE class (class 10)
'
' 1  ERR_SERVER_ALREADY_CREATED  CNDEX server already created
' 2  ERR_CREATING_SERVER_OBJECT  Error creating CNDEX server
' 3  ERR_SERVER_NOT_CREATED      CNDEX server never created or already released
' 4  ERR_INVALID_PARAMETER       Invalid value for one or more parameters
' 5  ERR_OPTION_NOT_ENABLED      The COMMUNICATION option is not enabled for connected CNC
*/


#define DLL_INTERFACE_ERR_CLASS     10

enum DLL_INTERFACE_ERR
{
   ERR_SERVER_ALREADY_CREATED = 1,
   ERR_CREATING_SERVER_OBJECT,
   ERR_SERVER_NOT_CREATED,
   ERR_INVALID_PARAMETER,
   ERR_OPTION_NOT_ENABLED,
   ERR_UAS_DISABLED_WHEN_RCM_ON
};

enum SECURITY_LEVEL_C
{
    SECURITY_LEV_ADMIN_C = 1,
    SECURITY_LEV_SERVICE_C = 2,
    SECURITY_LEV_OEM_ADMIN_C = 3,
    SECURITY_LEV_OEM_SERVICE_C = 4,
    SECURITY_LEV_USER_ADMIN_C = 5,
    SECURITY_LEV_USER_SERVICE_C = 6
};


#define ON  1
#define OFF 0


// 10 Series modes
#define MDI      1
#define AUTO     2
#define SEMI     3
#define MANJOG   4
#define INCJOG   5
#define PROFILE  6
#define HOME     7



// 10 Series Status
#define IDLE   1
#define CYCLE  2
#define HOLDA  3
#define RUNH   4
#define HRUN   5
#define ERRO   6
#define WAIT   7
#define RESET  8
#define EMERG  9
#define INPUT  10

// 10 Series SubStatus
#define MAS    6
#define MBR    4         



#define NUM_ELEM_SEL_AXI 9
// Axes Position type selector
#define PROGPOS   1  // Programmed positions
#define INTPOS    2  // Interpolated positions
#define TRANSDPOS 3  // Transducer Position
#define ERRPOS    4  // Following Errors

#define MAIN_PROGR_NAME_LEN 55


///////////////////////////////
// Logic variables identifier
///////////////////////////////
// Boolean LOGIC variables
#define I_CODE    0
#define O_CODE    1
#define M_CODE    2
#define G_CODE    3
#define S_CODE    4
#define P_CODE    7
// obsolete #define U_CODE    9
// WORD LOGIC variables
#define MW_CODE   20
#define GW_CODE   21
#define SW_CODE   22
#define PW_CODE   62
// obsolete #define UW_CODE   63
// DOUBLE LOGIC variables
#define MD_CODE   40
#define GD_CODE   41
#define SD_CODE   42
#define PD_CODE   43
#define L_CODE   145
// TEXT LOGIC variables
#define A_CODE    45
#define AA_CODE   28
#define LS_CODE   18
// Double PROCESS variables 
#define E_CODE    46
#define SN_CODE   47
#define H_CODE    48
// TEXT PROCESS variables
#define SC_CODE   50
// SyncMotion variables
#define SYMO_W_CODE    100  // SymoW variables
#define SYMO_D_CODE    101  // SymoD variables
#define SYMO_A_CODE    102  // SymoA variables
#define SYMORET_W_CODE 103  // SymoRetW variables
#define SYMORET_D_CODE 104  // SymoRetD variables


// Tables identifiers
#define AXIS_TABLE_ID    1  // AXIS TABLE identifier
#define TOOL_TABLE_ID    2  // TOOL TABLE identifier
#define OFFSET_TABLE_ID  3  // OFFSET TABLE identifier
#define USER_TABLE_ID    4  // USER TABLE identifier


// Modalita' di Boot
#define BOOT_EMERGENCY_MODE   1  // Modalita' "EMERGENZA"
#define BOOT_RUN_MODE         2  // Modalita' "RUN"
#define BOOT_SETUP_MODE       3  // Modalita' "SETUP"
#define BOOT_SERVICE_MODE     4  // Modalita' "SERVICE"


//Logical directory identifiers
#define PPDIR_PROGRAM 0  //PROGRAM Directory
#define PPDIR_USER    1  //USER Directory
#define PPDIR_SYSTEM  2  //SYSTEM Directory
#define PPDIR_OEM     3  //OEM Directory


#pragma pack(push, VB_requires_pack_4, 4)

   struct GETINTDATA_C4
   {
      BYTE AxisName;
      BYTE mode;
      double position;
      double TotalOffset;
   };

   struct PROCDATA_C4
   {
      WORD Mode; 
      WORD Status;
      WORD SubStatus;
   };

   struct GETINFO1DATA_C4
   {
      BYTE   status;          // process status     
      BYTE   substatus;       // process substatus
      BYTE   mode_select;     // selected mode
      BYTE   jog_dir;         // 1 = negative 0 = positive
      WORD   speed_ov;        // speed override
      WORD   feed_ov;         // feed override
      WORD   rap_feed_ov;     // rapid feed override
      WORD   man_feed_ov;     // manual feed override
      double jog_incr;        // incremental jog value
      BYTE   num_ax_sel;      // number of selected axes
      BYTE   ax_sel[NUM_ELEM_SEL_AXI];       // array of selected axes
      double actual_tool;     // actual active tool number
      double progr_tool;      // programmed tool number
      WORD   actual_tool_off; // actual tool offset number
      WORD   progr_tool_off;  // programmed tool offset number
      double real_speed;      // real spindle feed
      double progr_speed;     // programmed spindle feed
      double progr_feed;      // programmed feed
      double rapid_feed;      // rapid feed
      double real_feed;       // real feed
      WORD   feed_mis_unit;   // misure unit of feed
      BYTE   main_progr_name[MAIN_PROGR_NAME_LEN];   // active main part program name
      BYTE   dry_run;         // 1 = dry run modality active
      BYTE   rapid_override;  // 1 = rapid ovverride enable
      BYTE   disable_slashed_blk;   // 1 = slashed block disable
      BYTE   optional_stop;   // 1 = M00 stop enable
      BYTE   force_rapid_feed;      // 1 = rapid feed forced
      BYTE   auto_jog_ret;    // 1 = automatic jog return mode
      BYTE   block_retrace;   // 1 = multi block retrace active
      WORD   last_nc_error;   // last NC error. 0 = no error
      BYTE   free[22];        // free
   };

   struct GETINFO2DATA_C4
   {
      WORD     StatusWord;
      double   Urp;
      double   ActTool;
      WORD     ActOffset;
      double   ProgTool;
      WORD     ProgOffset;
      WORD     M_Status;
      WORD     M_Value[16];
      BYTE     Ax1Name;
      double   Ax1Offset;
      BYTE     Ax2Name;
      double   Ax2Offset;
      double   Radius;
   };

   struct GETBLKNUMDATA_C4
   {
      WORD ppActNum;
      unsigned long MainActBlk;
      unsigned long Sbr1ActBlk;
      unsigned long Sbr2ActBlk;
      unsigned long Sbr3ActBlk;
      unsigned long Sbr4ActBlk;
   };

   // 10/Series Axis table descriptor
   struct AXIS_TABLE_C4
   {
      WORD ax_owner;            // ambient owner
      WORD ax_name;             // ascii axis name
      double ax_orig;           // actual origin
      double free1;             // FREE FIELD
      double ax_ofg92;          // offset G92
      double ax_toff;           // actual tool offset
      double free2;             // FREE FIELD
      double ax_offset;         // total offset
      double orig1;             // origin 1
      double orig2;             // origin 2
      double orig3;             // origin 3
      double orig4;             // origin 4
      double orig5;             // origin 5
      double orig6;             // origin 6
      double orig7;             // origin 7
      double orig8;             // origin 8
      double orig9;             // origin 9
      double orig10;            // origin 10
      WORD riservati[2];        // reserved
   };

   // 10/Series Tool table descriptor
   struct TOOL_TABLE_C4
   {
      double tcode;             // tool code
      WORD pocket;              // pocket position
      WORD tfamcol;             // random family
      WORD tclass;              // tool class
      WORD tstatus;             // status word
      WORD tcntrl;              // control word
      double maxtime;           // start life
      double remtime;           // actual life
      double tuser1;            // user parameter 1
      double tuser2;            // user parameter 2
      double tuser3;            // user parameter 3
      double tuser4;            // user parameter 4
      WORD tolfnr;              // offset number
   };

   // 10/Series Offset table descriptor
   struct OFFSET_TABLE_C4
   {
      double tactl1;          // actual tool lenght 1
      double tcmaxl1;         // max change lenght 1
      double tcactl1;         // actual change lenght 1
      double tactl2;          // actual tool lenght 2
      double tcmaxl2;         // max change lenght 2
      double tcactl2;         // actual change lenght 2
      double tdiameter;       // diameter (ex radius)
      double tcacdiam;        // diameter wear (ex tangle)
      WORD torient;           // orientation
   };

   // 10/Series User table descriptor
   struct USER_TABLE_C4
   {
      double user1;             // user variable 1
      double user2;             // user variable 2
      double user3;             // user variable 3
      double user4;             // user variable 4
   };


#define  TOOL_ASCII_LEN      (32+1)          // Max lunghezza ASCII tool name
#define  NUM_DUSER            10
#define  NUM_SUSER            10
#define  OFFS_AX               5             // Numero max offset - assi
#define  DIAM_AX               2             // Numero max diametri - assi
#define  DESCR_LEN           (32+1)          // Dimensione campo commento per tabelle
const long MAX_NUM_AX_XTEND   = 64;

   struct TOOL_TABLE_II_C4
   {
      char   ToolName [TOOL_ASCII_LEN];      // Nome utensile
      WORD   Status;                         // Stato utensile
      WORD   LifeType;                       // Tipo gestione vita
      double MaxLife;                        // Vita iniziale
      double RemLife;                        // Vita rimanente
      WORD   OffsNum;                        // Numero di offset di default
      WORD   ExternType;                     // Tipo gestione esterna (..Magazzini)
      WORD   ExternInd;                      // Indice per gestione esterna (..)
      double Duser [NUM_DUSER];                     // Parametri User double
      short  Suser [NUM_SUSER];                     // Parametri user short
      WCHAR  Descr [DESCR_LEN];              // Commento con /0
   };

   struct OFFSET_VAL_II_C4
   {
      double ValOrig;                        // Valore originale utensile
      double MaxChangeVal;                   // Massima variazione possibile
      double ActChangeVal;                   // Variazione corrente
   };


   struct OFFSET_TABLE_II_C4
   {
      struct OFFSET_VAL_II_C4 LenVal [OFFS_AX]; // Lughezze
      struct OFFSET_VAL_II_C4 DiaVal [DIAM_AX]; // Diametri / Raggetto
      WORD   Orient;                         // Orientamento
      WORD   ExternType;                     // Tipo gestione esterna (..)
      WORD   ExternInd;                      // Indice per gestione esterna (..)
      double Duser [NUM_DUSER];                     // Parametri User double
      short  Suser [NUM_SUSER];                     // Parametri user short
      WCHAR  Descr [DESCR_LEN];              // Commento con /0
   };


   struct ORIGIN_TABLE_II_C4
   {
      double AxisVal [MAX_NUM_AX_XTEND];     // Valore origine per ogni asse
      WORD   ExternType;                     // Tipo gestione esterna (..)
      WORD   ExternInd;                      // Indice per gestione esterna (..)
      WCHAR  Descr [DESCR_LEN];              // Commento con /0
   };


   struct USER_TABLE_II_C4
   {
      double UserVal [4];                    // user variable (1 - 4)
   };



   struct ERR_MSG_C4
   {
      unsigned char Msg1[40];
      unsigned char Msg2[40];
      unsigned char Msg3[40];
      unsigned char Msg4[40];
   };


   struct PLVARDESC_C4
   {
      unsigned short Code;
      unsigned short Index;
      unsigned short Bit;
   };


   struct AX_ORIG_NUM_C4
   {
       unsigned char AxisName;
       unsigned char OriginNumber;
       unsigned short OriginFlag;
   };

	struct EMCY_TYPE_C4
	{
	  unsigned short usEmcyErrCode;
	  unsigned char  usEmcyErrorReg;
	  unsigned long  SpecErrField;
	  unsigned char  reserved;
	};


   struct FILE_FIND_DATA_C4
   {
       unsigned long dwFileAttributes;
       unsigned long dwLowDateCreationTime;
       unsigned long dwHighDateCreationTime;
       unsigned long dwLowDateLastAccessTime;
       unsigned long dwHighDateLastAccessTime;
       unsigned long dwLowDateLastWriteTime;
       unsigned long dwHighDateLastWriteTime;
       unsigned long nFileSizeHigh;
       unsigned long nFileSizeLow;
       unsigned short cFileName[260];
   };


   struct SYSTEMTIME_CNDEX_C4
   {
      WORD wYear;
      WORD wMonth;
      WORD wDayOfWeek;
      WORD wDay;
      WORD wHour;
      WORD wMinute;
      WORD wSecond;
      WORD wMilliseconds;
    };

   /* --- Emergency ------------------------------------------------------------- */
   struct MSG_EMERGENCY_C4
   {
       DWORD      BootID;     
       SYSTEMTIME_CNDEX_C4 SystemTime;   /* - Istante di generazione -------------- */
       DWORD      UnIdSeq;             /* - Numero di sequenza (da accensione) -- */
       DWORD      Code_Err;            /* - Codice Emergenza -------------------- */
       short      Process;             /* - Processo ---------------------------- */
       short      Proc_Err;            /* - Processi Coinvolti ------------------ */
       BYTE       FormatTxt[148];      /* - Dati aggiuntivi per emergenza ------- */
   };


   /* --- Error ----------------------------------------------------------------- */
   struct MSG_ERROR_C4
   {
       DWORD      BootID;     
       SYSTEMTIME_CNDEX_C4 SystemTime;   /* - Istante di generazione -------------- */
       DWORD      UnIdSeq;             /* - Numero di sequenza (da accensione) -- */
       DWORD      Code_Err;            /* - Codice Errore ----------------------- */
       short      Process;             /* - Processo ---------------------------- */
       char       Comando;             /* - Comando in errore ------------------- */
       char       SubCom;              /* - Sottocomando in errore -------------- */
       BYTE       FormatTxt[148];      /* - Dati aggiuntivi per errore ---------- */
   };

   /* --- Log ------------------------------------------------------------------- */
   struct MSG_LOGS_C4
   {
       DWORD      BootID;     
       SYSTEMTIME_CNDEX_C4 SystemTime;   /* - Istante di generazione -------------- */
       DWORD      UnIdSeq;             /* - Numero di sequenza (da accensione) -- */
       DWORD      Code_Log;            /* - Codice Log -------------------------- */
       DWORD      Err_info;            /* - Log con associato errore ------------ */
       BYTE       FormatTxt[148];      /* - Dati aggiuntivi per log ------------- */
   };

   /* --- System Anomaly -------------------------------------------------------- */
   struct MSG_ANOMALY_C4
   {
       DWORD      BootID;     
       SYSTEMTIME_CNDEX_C4 SystemTime;   /* - Istante di generazione -------------- */
       DWORD      UnIdSeq;             /* - Numero di sequenza (da accensione) -- */
       DWORD      Code_Err;            /* - Codice Errore ----------------------- */
       DWORD      Linea;               /* - Linea ------------------------------- */
       BYTE       FormatTxt[148];      /* - Messaggio aggiuntivo ---------------- */
   };

struct MON_VAR_DESCR_C4
{
	WORD	Class;
	WORD	SubClass;
	WORD	DeviceID;
	WORD	Code;
	WORD	Address;
	WORD	Signal;
	double	SamplingPeriod;
};

struct MON_DEBUG_INFO_C4
{
	WORD	ChannelNum;
	WORD	OSWireTaskNum;
	WORD	LogicTaskNum;
	WORD	AsyncAxisTaskNum;
	WORD	SyncAxisTaskNum;
	WORD	OSWireVarNum;
	WORD	LogicVarNum;
	WORD	AxisVarNum;
	WORD	Reserved1;
	WORD	Reserved2;
	DWORD	Reserved3;
	DWORD	Reserved4;
	double	Reserved5;
	double	Reserved6;
};


typedef struct tagMONCUSTOMEVENTINFO_C4
{
    WORD ID;
	WORD Type;
    char Name[41];
} MONCUSTOMEVENTINFO_C4;

#pragma pack(pop, VB_requires_pack_4)

#ifdef UNDER_CE
 #ifdef EXPORT_CNDEXLINK
  #define  IMPORT_EXPORT_DECL 
 #else
  #define  IMPORT_EXPORT_DECL      extern "C" _declspec(dllimport)
 #endif
#else
 #ifdef EXPORT_CNDEXLINK
  #define  IMPORT_EXPORT_DECL      extern "C" _declspec(dllexport)
 #else
  #define  IMPORT_EXPORT_DECL      extern "C" __declspec(dllimport)
 #endif
#endif


//***** SERVER CONNECTION FUNCTIONS PROTOTYPES *****
//***** Obsolete - These functions are empty and left here for backword compatibilty. *****
//*****            New application can avoid to call them.                            *****
//obsolete IMPORT_EXPORT_DECL 
//obsolete WORD WINAPI ConnectServer_C(LPSTR ServerAddress, DWORD *pErrClass, DWORD *pErrNum);
//extern "C" __declspec(dllimport) int TranslateCrimsonReply1(int, int*, int);
//extern "C" __declspec(dllimport) WORD ConnectServer_C(int ServerAddress, int *pErrClass, int *pErrNum);

//obsolete IMPORT_EXPORT_DECL 
//obsolete WORD WINAPI ReleaseServer_C(DWORD *pErrClass, DWORD *pErrNum);



//***** SESSION MANAGEMENT FUNCTIONS PROTOTYPES *****

IMPORT_EXPORT_DECL 
WORD WINAPI OpenSession_C(LPSTR RemoteName, WORD * pUserSession, DWORD *pErrClass, DWORD *pErrNum);

//IMPORT_EXPORT_DECL
//WORD WINAPI OpenSessionForThreads_C(LPSTR RemoteName, WORD * pUserSession, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI CloseSession_C(WORD UserSession, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI IsSessionOpened_C(WORD UserSession);



//***** GENERAL FUNCTIONS PROTOTYPES *****

IMPORT_EXPORT_DECL 
WORD WINAPI GetCodeNumber_C(WORD UserSession, LPSTR pCodeNumber, LPSTR pSwVersion, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI GetOptions_C(WORD UserSession, BYTE *pOption, BYTE *pSecurLevel, LPSTR pSwVersion, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI GetDateTime_C(WORD UserSession, WORD *pYear, WORD *pMonth, WORD *pDay, WORD *pHour, WORD *pMinute, WORD *pSecond, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI SetDateTime_C(WORD UserSession, WORD Year, WORD Month, WORD Day, WORD Hour, WORD Minute, WORD Second, DWORD *pErrClass, DWORD *pErrNum);



//***** CNC PPDIR FUNCTIONS PROTOTYPES *****

IMPORT_EXPORT_DECL 
WORD WINAPI PPInsertName_C(WORD UserSession, LPSTR LogicalName, LPSTR LogicalExt, WORD LogicalDir, LPSTR PhysicalName, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI PPDeleteName_C(WORD UserSession, LPSTR LogicalName, LPSTR LogicalExt, WORD LogicalDir, WORD *NumberOfNamesDeleted, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI PPGetLogicalName_C(WORD UserSession, LPSTR PhysicalName, LPSTR LogicalName, LPSTR LogicalExt, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI PPGetPhysicalName_C(WORD UserSession, LPSTR LogicalName, LPSTR LogicalExt, WORD LogicalDir, LPSTR PhysicalName, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI PPGetLogicalDir_C(WORD UserSession, LPSTR LogicalName, LPSTR LogicalExt, WORD *LogicalDir, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI PPUpdate_C(WORD UserSession, LPSTR LogicalName, LPSTR LogicalExt, WORD LogicalDir, DWORD *pErrClass, DWORD *pErrNum);



//***** VARIABLES MANAGEMENT FUNCTIONS PROTOTYPES *****

IMPORT_EXPORT_DECL 
WORD WINAPI ReadVarWord_C(WORD UserSession, WORD Code, WORD Process, WORD Index, WORD NumVar, WORD * pValue, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI ReadVarDouble_C(WORD UserSession, WORD Code, WORD Process, WORD Index, WORD NumVar, double * pValue, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI WriteVarWord_C(WORD UserSession, WORD Code, WORD Process, WORD Index, WORD NumVar, WORD * pValue, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI WriteVarWordBit_C(WORD UserSession, WORD Code, WORD Process, WORD Index, WORD BitIndex, WORD BitValue, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI WriteVarDouble_C(WORD UserSession, WORD Code, WORD Process, WORD Index, WORD NumVar, double * pValue, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI ReadVarText_C(WORD UserSession, WORD Code, WORD Process, WORD Index, WORD Size, BYTE * Text, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI WriteVarText_C(WORD UserSession, WORD Code, WORD Process, WORD Index, WORD Len, BYTE * Text, DWORD *pErrClass, DWORD *pErrNum);


//***** CNC BOOT FUNCTIONS PROTOTYPES *****

IMPORT_EXPORT_DECL 
WORD WINAPI BootPhaseEnquiry_C(WORD UserSession, WORD *pPhase, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI BootReboot_C(WORD UserSession, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI BootShutDown_C(WORD UserSession, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI BootMode_C(WORD UserSession, WORD Mode, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI BootStatus_C(WORD UserSession, WORD *pPhase, WORD *pAckGo, WORD *pEndSession, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI BootAckGo_C(WORD UserSession, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI BootEnterServer_C(WORD UserSession, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI BootLeaveServer_C(WORD UserSession, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI GetHWKey_C(WORD UserSession, BYTE *pHwKey, BYTE *pSecurLevel, BYTE *pRelease, DWORD *pErrClass, DWORD *pErrNum);



//***** PROCESS FUNCTIONS PROTOTYPES *****

IMPORT_EXPORT_DECL 
WORD WINAPI Cycle_C(WORD UserSession, WORD ProcNum,
        WORD Cmd, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI SyncroCycle_C(WORD UserSession, WORD ProcNum,
              DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI Reset_C(WORD UserSession, WORD ProcNum,
        DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI Hold_C(WORD UserSession, WORD ProcNum, WORD Cmd,
       DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI SetFeedManOver_C(WORD UserSession, WORD ProcNum, WORD FeedManOver,
                 WORD Direction, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI SetManMovDirection_C(WORD UserSession, WORD ProcNum, WORD Direction,
                     DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI SetFeedRateOver_C(WORD UserSession, WORD ProcNum, WORD FeedRateOver,
                  DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI SetFeedRapidOver_C(WORD UserSession, WORD ProcNum, WORD FeedRapidOver,
                   DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI SetSpeedRateOver_C(WORD UserSession, WORD ProcNum, WORD SpeedRateOver,
                   DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI SetMdiString_C(WORD UserSession, WORD ProcNum, LPSTR pMdiString,
               DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI SetProcessMode_C(WORD UserSession, WORD ProcNum, WORD Mode,
                 DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI SelectProcess_C(WORD UserSession, WORD ProcNum,
                DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI GetSelectedProcess_C(WORD UserSession, WORD *pProcNum,
                     DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI SelectProcAxis_C(WORD UserSession, WORD ProcNum, BYTE AxisName,
               DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI SelectPartProgram_C(WORD UserSession, WORD ProcNum, LPSTR pPPName,
                    DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI SelectPartProgramFromDrive_C(WORD UserSession, WORD ProcNum, LPSTR pPPName,
                    DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI GetAxesPosition_C(WORD UserSession, WORD ProcNum,
                  BYTE AxisName, WORD Select,
                  WORD *pNumAxis, GETINTDATA_C4 *pIntPos,
                  DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI GetNcInfo1_C(WORD UserSession, WORD ProcNum,
             GETINFO1DATA_C4 *pGetInfo,
             DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI GetNcInfo2_C(WORD UserSession, WORD ProcNum,
             GETINFO2DATA_C4 *pGetInfo,
             DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI GetToolNames_C(WORD UserSession, WORD ProcNum,
               LPSTR pTool, LPSTR pProgTool,
               DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI GetProcessStatus_C(WORD UserSession, WORD ProcNum,
                   PROCDATA_C4 *pProcStat,
                   DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI GetBlkNum_C(WORD UserSession, WORD ProcNum,
            GETBLKNUMDATA_C4 *lpGetBlkNum,
            DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI AxesRef_C(WORD UserSession, WORD ProcNum, WORD NumAx,
          LPSTR pAxisName, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI GetVarE_C(WORD UserSession, WORD ProcNum, WORD Index, WORD *pNum,
          double *pValue, DWORD *pErrClass, DWORD *pErrNumb);

IMPORT_EXPORT_DECL 
WORD WINAPI GetVarSN_C(WORD UserSession, WORD ProcNum, WORD Index, WORD *pNum,
           double *pValue, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI GetVarSC_C(WORD UserSession, WORD ProcNum, WORD Index, WORD *pNum,
           BYTE *pValue, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI GetVarJOG_C(WORD UserSession, WORD ProcNum, double *pValue,
            DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI GetVarRCM_C(WORD UserSession, WORD ProcNum, BYTE *pValue,
            DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI SetVarE_C(WORD UserSession, WORD ProcNum, WORD Index, WORD Num,
          double *pValue, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI SetVarSN_C(WORD UserSession, WORD ProcNum, WORD Index, WORD Num,
           double *pValue, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI SetVarSC_C(WORD UserSession, WORD ProcNum, WORD Index, WORD Num,
           BYTE *pValue, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI SetVarJOG_C(WORD UserSession, WORD ProcNum, double Value,
            DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI SetVarUAS_C(WORD UserSession, WORD ProcNum, WORD Mode,
            DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI SetVarRCM_C(WORD UserSession, WORD ProcNum, WORD Mode,
            DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI ReadErrMsg_C(WORD UserSession, WORD ProcNum, ERR_MSG_C4 *pSysErrMsg,
             DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI ReadPartProgramMsg_C(WORD UserSession, WORD ProcNum, LPSTR pPartProgramMsg,
                     DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI GetGCode_C(WORD UserSession, WORD ProcNum, WORD *pGCode,
           DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI GetMCode_C(WORD UserSession, WORD ProcNum, WORD *pMCode,
           DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI SkipPProgBlock_C(WORD UserSession, WORD ProcNum, DWORD NumOfBlocks,
                 WORD Direction, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI Ese_C(WORD UserSession, WORD ProcNum, DWORD BlockNum,
      DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI GetActivePartProgram_C(WORD UserSession, WORD ProcNum, WORD *pLevel, LPSTR pMain, LPSTR pSub, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI GetPartProgramLines_C(WORD UserSession, WORD ProcNum, LPSTR pPPLine1, LPSTR pPPLine2, LPSTR pPPLine3, LPSTR pPPLine4, LPSTR pPPLine5, LPSTR pPPLine6, LPSTR pPPLine7, LPSTR pPPLine8, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI GetAxOriginNum_C(WORD UserSession, WORD ProcNum, WORD *pAxesNum, AX_ORIG_NUM_C4 *pAxOriginNum, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL
WORD WINAPI GetProcessConfNum_C(WORD UserSession, BYTE *pProcessconfNum, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL
WORD WINAPI GetAxesInfo3_C(WORD UserSession, WORD AxisId, WORD * pNumAxes, WORD * pAxOwnerList, BYTE * pAxNameList, WORD *pAxType, WORD *pAxInterface, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL
WORD WINAPI GetAvailableCustomEvents_C(WORD UserSession, WORD MaxEvents, WORD *pNumEvents, MONCUSTOMEVENTINFO_C4 *pEventData, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI GetSysTick_C(WORD UserSession, double *pSysTick, DWORD *pErrClass, DWORD *pErrNum);



//***** PLC FUNCTIONS PROTOTYPES *****

IMPORT_EXPORT_DECL 
WORD WINAPI GetPLVarWord_C(WORD UserSession, WORD NumVar, PLVARDESC_C4 *pVarDesc,
               short *pValue, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI SetPLVarWord_C(WORD UserSession, WORD NumVar, PLVARDESC_C4 *pVarDesc,
               short *pValue, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI GetPLVarDouble_C(WORD UserSession, WORD NumVar, PLVARDESC_C4 *pVarDesc,
                 double *pValue, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI SetPLVarDouble_C(WORD UserSession, WORD NumVar, PLVARDESC_C4 *pVarDesc,
                 double *pValue, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI GetPLVarAscii_C(WORD UserSession, WORD Index, LPSTR pValue,
                DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI SetPLVarAscii_C(WORD UserSession, WORD Index, LPSTR pValue,
                DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI GetPLStreamWord_C(WORD UserSession, WORD NumVar, WORD Code, WORD StartIndex,
                  short *pValue, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI GetPLStreamDouble_C(WORD UserSession, WORD NumVar, WORD Code, WORD StartIndex,
                    double *pValue, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI SetPLStreamWord_C(WORD UserSession, WORD NumVar, WORD Code, WORD StartIndex,
                  short *pValue, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI SetPLStreamDouble_C(WORD UserSession, WORD NumVar, WORD Code, WORD StartIndex,
                    double *pValue, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI ReadWarningMsg_C(WORD UserSession, LPSTR pWarningMsg,
                 DWORD *pErrClass, DWORD *pErrNum);


//***** TABLES RELATED FUNCTIONS PROTOTYPES (Serie 10) *****

IMPORT_EXPORT_DECL 
WORD WINAPI GetAxisTabRecord_C(WORD UserSession, WORD RecordNum,
                   AXIS_TABLE_C4 *pRecordBuff,
                   DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI GetToolTabRecord_C(WORD UserSession, WORD RecordNum,
                   TOOL_TABLE_C4 *pRecordBuff,
                   DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI GetOffsetTabRecord_C(WORD UserSession, WORD RecordNum,
                     OFFSET_TABLE_C4 *pRecordBuff,
                     DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI GetUserTabRecord_C(WORD UserSession, WORD RecordNum,
                   USER_TABLE_C4 *pRecordBuff,
                   DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI GetTabFieldDouble_C(WORD UserSession, WORD TableNum, WORD RecordNum,
                    WORD FieldNum, double *pValue,
                    DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI GetTabFieldShort_C(WORD UserSession, WORD TableNum, WORD RecordNum,
                   WORD FieldNum, short *pValue,
                   DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI SetAxisTabRecord_C(WORD UserSession, WORD RecordNum,
                   AXIS_TABLE_C4 *pRecordBuff,
                   DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI SetToolTabRecord_C(WORD UserSession, WORD RecordNum,
                   TOOL_TABLE_C4 *pRecordBuff,
                   DWORD *pErrClass, DWORD *pErrNum);


IMPORT_EXPORT_DECL 
WORD WINAPI SetOffsetTabRecord_C(WORD UserSession, WORD RecordNum,
                     OFFSET_TABLE_C4 *pRecordBuff,
                     DWORD *pErrClass, DWORD *pErrNum);


IMPORT_EXPORT_DECL 
WORD WINAPI SetUserTabRecord_C(WORD UserSession, WORD RecordNum,
                   USER_TABLE_C4 *pRecordBuff,
                   DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI SetTabFieldDouble_C(WORD UserSession, WORD TableNum,
                    WORD RecordNum, WORD FieldNum, double Value,
                    DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI SetTabFieldShort_C(WORD UserSession, WORD TableNum,
                   WORD RecordNum, WORD FieldNum, short Value,
                   DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI SetTabSem_C(WORD UserSession, WORD TableNum, WORD SemStatus,
            DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI TabSemInfo_C(WORD UserSession, WORD *pSemStatus,
             DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI TabSearchDouble_C(WORD UserSession, WORD TabNum, WORD FieldNum,
                  WORD StartIndex, WORD StopIndex, double Value,
                  WORD *pMatchIndex, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI TabSearchShort_C(WORD UserSession, WORD TabNum, WORD FieldNum,
                 WORD StartIndex, WORD StopIndex, WORD Value,
                 WORD Mask, WORD * pMatchIndex, DWORD *pErrClass, DWORD *pErrNum);



//***** TABLES RELATED FUNCTIONS PROTOTYPES (XTend) *****

IMPORT_EXPORT_DECL 
WORD WINAPI ResetSingleTableII_C(WORD UserSession, WORD TableNum, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI LockTableII_C(WORD UserSession, WORD TableNum, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI UnLockTableII_C(WORD UserSession, WORD TableNum, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI GetToolTabRecordII_C(WORD UserSession, DWORD RecordNum,
                               TOOL_TABLE_II_C4 *pRecordBuff,
                               DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI GetOffsetTabRecordII_C(WORD UserSession, DWORD RecordNum,
                                 OFFSET_TABLE_II_C4 *pRecordBuff,
                                 DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI GetOriginTabRecordII_C(WORD UserSession, DWORD RecordNum,
                                 ORIGIN_TABLE_II_C4 *pRecordBuff,
                                 DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI GetUserTabRecordII_C(WORD UserSession, DWORD RecordNum,
                               USER_TABLE_II_C4 *pRecordBuff,
                               DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI SetToolTabRecordII_C(WORD UserSession, DWORD RecordNum,
                               TOOL_TABLE_II_C4 *pRecordBuff,
                               DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI SetOffsetTabRecordII_C(WORD UserSession, DWORD RecordNum,
                                   OFFSET_TABLE_II_C4 *pRecordBuff,
                                   DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI SetOriginTabRecordII_C(WORD UserSession, DWORD RecordNum,
                                   ORIGIN_TABLE_II_C4 *pRecordBuff,
                                   DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI SetUserTabRecordII_C(WORD UserSession, DWORD RecordNum,
                                 USER_TABLE_II_C4 *pRecordBuff,
                                 DWORD *pErrClass, DWORD *pErrNum);
IMPORT_EXPORT_DECL 
WORD WINAPI SaveBackupMemory_C(WORD UserSession, LPWSTR FileName,
							   DWORD *pErrClass, DWORD *pErrNum);
IMPORT_EXPORT_DECL 
WORD WINAPI RestoreBackupMemory_C(WORD UserSession, LPWSTR FileName,
								  DWORD RestoreMask,
								  DWORD *pErrClass, DWORD *pErrNum);
IMPORT_EXPORT_DECL
WORD WINAPI BootDOSCmd_C(WORD UserSession, LPSTR pBuffer,
						 DWORD *pErrClass, DWORD *pErrNum);
IMPORT_EXPORT_DECL
WORD WINAPI BootDOSStatus_C(WORD UserSession, WORD *pStatusr,
						 DWORD *pErrClass, DWORD *pErrNum);


//***** CAN FUNCTIONS PROTOTYPES *****

IMPORT_EXPORT_DECL 
WORD WINAPI CANReadSDO_C(WORD UserSession, WORD DevNum, BYTE idNode, WORD Index, BYTE subIndex, WORD Timeout, BYTE Sync, BYTE *Data, WORD *DataLen, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI CANWriteSDO_C(WORD UserSession, WORD DevNum, BYTE idNode, WORD Index, BYTE subIndex, WORD Timeout, BYTE Sync, BYTE *Data, WORD *DataLen, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI CANNMT_C(WORD UserSession, WORD DevNum, BYTE idNode, WORD Cmd, WORD Timeout, BYTE Sync, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI CANSync_C(WORD UserSession, WORD DevNum, WORD Timeout, BYTE Sync, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI CANInit_C(WORD UserSession, WORD DevNum, WORD TickNr, WORD Inp1, WORD Inp2, WORD Out1, WORD Out2, WORD OffsDiagn, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI CANGetEmergency_C(WORD UserSession, WORD DevNum, BYTE idNode, WORD Timeout, BYTE Sync, WORD *NodeStatus, WORD *AddInfo, WORD *ProfNum, short *NodeStateNG, short *ActualErr, short *EmcyLen, EMCY_TYPE_C4 *EmcyData, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI CANBoard_C(WORD UserSession, WORD DevNum, WORD Cmd, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI CANConsoleCfg_C(WORD UserSession, WORD DevNum, BYTE idNode, WORD InpOffs, WORD OutOffs, WORD TimeOut, BYTE Sync, DWORD *pErrClass, DWORD *pErrNum);


//***** OPENCONTROL MONITORING FUNCTIONS PROTOTYPES *****

IMPORT_EXPORT_DECL 
WORD WINAPI MonOpenChannel_C(WORD UserSession, BOOL bSynchronized, DWORD *pChannelID, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI MonCloseChannel_C(WORD UserSession, DWORD ChannelID, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI MonAddVariable_C(WORD UserSession, DWORD ChannelID, MON_VAR_DESCR_C4 VarDescr, WORD *pVariableID, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI MonAddAxisVariable_C(WORD UserSession, DWORD ChannelID, WORD AxisID, WORD VariableCode, double SamplingTime, WORD *pVariableID, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI MonDeleteVariable_C(WORD UserSession, DWORD ChannelID, WORD VariableID, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI MonStartSampling_C(WORD UserSession, DWORD ChannelID, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI MonStopSampling_C(WORD UserSession, DWORD ChannelID, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI MonActivateTrigger_C(WORD UserSession, DWORD ChannelID, WORD VariableID, WORD TriggerType, double Threshold, __int64 PreTriggerWindow, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI MonGetVariable_C(WORD UserSession, DWORD ChannelID, WORD VariableID, WORD MaxSamples, WORD *pNumSampleRead, double *pDataBuffer, __int64 *pTimeBuffer, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI MonGetSynchronizedData_C(WORD UserSession, DWORD ChannelID, WORD NumVar, WORD *VarID, WORD MaxSamples, WORD *pNumSampleRead, double *pDataBuffer, __int64 *pTimeBuffer, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI MonGetDebugInfo_C(WORD UserSession, MON_DEBUG_INFO_C4 *pDbgInfo, DWORD *pErrClass, DWORD *pErrNum);

//***** FILE SYSTEM FUNCTIONS PROTOTYPES *****

IMPORT_EXPORT_DECL
WORD WINAPI LogFSTransferFile_C(LPCSTR SourceTargetName, LPCSTR SourceFilePath, LPCSTR DestTargetName, LPCSTR DestFilePath, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI LogFSTransferFileW_C(LPCWSTR SourceTargetName, LPCWSTR SourceFilePath, LPCWSTR DestTargetName, LPCWSTR DestFilePath, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI LogFSSetSecurityLevel_C(WORD UserSession, LPCWSTR Password, SECURITY_LEVEL_C SecurityLevel, SECURITY_LEVEL_C * pOldSecurityLevel, DWORD *pErrClass, DWORD * pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI LogFSGetSecurityLevel_C(WORD UserSession, SECURITY_LEVEL_C * pSecurityLevel, DWORD *pErrClass, DWORD * pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI LogFSLongFileNames_C(WORD UserSession, WORD * pUseLongFileNames, DWORD *pErrClass, DWORD * pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI LogFSReloadDriveList_C(WORD UserSession, DWORD *pErrClass, DWORD * pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI LogFSGetNumDrive_C(WORD UserSession, WORD * pNumHiddenDrive, WORD * pNumUserDrive, DWORD *pErrClass, DWORD * pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI LogFSGetHiddenDriveList_C(WORD UserSession, LPWSTR DriveName, WORD index, DWORD *pErrClass, DWORD * pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI LogFSGetDriveList_C(WORD UserSession, LPWSTR DriveName, WORD index, DWORD *pErrClass, DWORD * pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI LogFSAddDrive_C(WORD UserSession, LPCWSTR DriveName, LPCWSTR PathName, BOOL Temporary, SECURITY_LEVEL_C SecurityLevel, DWORD *pErrClass, DWORD * pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI LogFSGetDrivePath_C(WORD UserSession, LPCWSTR DriveName, LPWSTR DrivePath, SECURITY_LEVEL_C SecurityLevel, DWORD *pErrClass, DWORD * pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI LogFSRemoveDrive_C(WORD UserSession, LPCWSTR DriveName, SECURITY_LEVEL_C SecurityLevel, DWORD *pErrClass, DWORD * pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI LogFSCreateDir_C(WORD UserSession, LPCWSTR PathName, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI LogFSCreateFile_C(WORD UserSession, LPCWSTR PathName, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI LogFSGetFileSize_C(WORD UserSession, LPCWSTR PathName, UINT *pSize, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI LogFSGetFileAttrib_C(WORD UserSession, LPCWSTR PathName, DWORD *pAttrib, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI LogFSSetFileAttrib_C(WORD UserSession, LPCWSTR PathName, DWORD Attrib, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI LogFSChangeFileAttrib_C(WORD UserSession, LPCWSTR PathName, DWORD Add, DWORD Remove, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI LogFSFindFirst_C(WORD UserSession, LPCWSTR pFileName, FILE_FIND_DATA_C4 *pFindData, HANDLE *pHFinder, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI LogFSFindNext_C(WORD UserSession, FILE_FIND_DATA_C4 *pFindData, HANDLE hFinder, BOOL *pFound, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI LogFSFindClose_C(WORD UserSession, HANDLE hFinder, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI LogFSRemoveFile_C(WORD UserSession, LPCWSTR PathName, LPCWSTR FileName, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI LogFSRemoveDir_C(WORD UserSession, LPCWSTR PathName, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI LogFSRename_C(WORD UserSession, LPCWSTR PathName, LPCWSTR NewPathName, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI LogFSCopyFile_C(WORD UserSession, LPCWSTR PathName, LPCWSTR NewPathName, BOOL FailIfExists, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI LogFSGetInfo_C(WORD UserSession, LPCWSTR PathName, DWORD Selector, WORD ItemCounter, DWORD * pBuffer, DWORD *pErrClass, DWORD *pErrNum);

//***** ACTIVE PART PROGRAM DOWNLOAD FUNCTIONS PROTOTYPES *****

IMPORT_EXPORT_DECL 
WORD WINAPI DncInit_C(WORD UserSession, WORD ProcNum, LPSTR pPathName, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI DncData_C(WORD UserSession, WORD ProcNum, LPSTR pData, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI DncEof_C(WORD UserSession, WORD ProcNum, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI DncStop_C(WORD UserSession, WORD ProcNum, DWORD *pErrClass, DWORD *pErrNum);


//***** O.S. FUNCTIONS PROTOTYPES *****

IMPORT_EXPORT_DECL 
WORD WINAPI GRead_C(WORD UserSession, WORD MemId, WORD Offset, WORD Length, BYTE *pBuffer,
        WORD *pBufferLength, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL 
WORD WINAPI GWrite_C(WORD UserSession, WORD MemId, WORD Offset, WORD Length,
         BYTE *pBuffer, WORD *pBufferLength, DWORD *pErrClass, DWORD *pErrNum);


//***** LOG message FUNCTIONS PROTOTYPES *****

IMPORT_EXPORT_DECL
WORD WINAPI CheckLogMsg_C(WORD UserSession, WORD *pNumMsgLog, WORD *pSysAnomaly,
                          DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL
WORD WINAPI ReadLogMsg_C(WORD UserSession, WORD MsgIndex, WORD *pStringColor, LPSTR pBuffer,
                         DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL
WORD WINAPI ReadAnomalyMsg_C(WORD UserSession, WORD *pCurLogEnv, WORD *pCurLogTask,
                             WORD *pLevel, WORD *pModule, WORD *pErr, WORD *pActiveInt,
                             WORD *pSegDati, DWORD *pOffDati, DWORD *pErrClass, DWORD *pErrNum);

//***** HISTORY messages FUNCTIONS PROTOTYPES *****

// both pThisBootMsgCounter and pAllBootMsgCounter must point to arrays made of 5 DWORD
IMPORT_EXPORT_DECL
WORD WINAPI CheckHistory_C(WORD UserSession, DWORD * pThisBootMsgCounter,
                           DWORD * pAllBootMsgCounter, DWORD * pThisBootID,
                           DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL
WORD WINAPI ResetHistory_C(WORD UserSession, int FileType, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL
WORD WINAPI ReadHistoryEmergMsg_C(WORD UserSession, int ReadMode, DWORD RecNum,
                                  MSG_EMERGENCY_C4 *pData, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL
WORD WINAPI ReadHistoryErrorMsg_C(WORD UserSession, int ReadMode, DWORD RecNum,
                                  MSG_ERROR_C4 *pData, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL
WORD WINAPI ReadHistoryLogMsg_C(WORD UserSession, int NoHistory, int ReadMode, DWORD RecNum,
                                MSG_LOGS_C4 *pData, DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL
WORD WINAPI ReadHistoryAnomalyMsg_C(WORD UserSession, int ReadMode, DWORD RecNum,
                                    MSG_ANOMALY_C4 *pData, DWORD *pErrClass, DWORD *pErrNum);


//***** HISTORY messages FUNCTIONS PROTOTYPES *****

IMPORT_EXPORT_DECL
WORD WINAPI ReadCurrentErrorMsg_C(WORD UserSession, WORD Process, MSG_ERROR_C4 *pData,
                                  DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL
WORD WINAPI ReadCurrentEmergMsg_C(WORD UserSession, WORD Process, MSG_EMERGENCY_C4 *pData,
                                  DWORD *pErrClass, DWORD *pErrNum);

IMPORT_EXPORT_DECL
WORD WINAPI ReadCurrentAnomalyMsg_C(WORD UserSession, MSG_ANOMALY_C4 *pData, DWORD *pErrClass,
                                    DWORD *pErrNum);


#endif // !defined(AFX_CNDEXINTERFACE_H__F5589475_18D4_12F6_A790_0011E33659A4__INCLUDED_)


